{"name":"Build a simple search page using ASP.NET MVC 4 (C#)","tagline":"Build a simple search page using ASP.NET MVC 4 (C#). What you build is entirely up to you, however, the application should contain a model, controller, and view and meet the requirements. You may spend as much time as you feel comfortable spending within the allotted time constraints.","body":"Turn5MvcApp\r\n===========\r\n\r\n### TOOLBOX:\r\n\r\nDuring this exercise, please use the following:\r\n\r\n•\tASP.NET MVC 4 \r\n•\tjQuery (Feel free to use the Google CDN by including this tag in your markup <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>)\r\n•\tGit (create an account on github.com, or use existing)\r\n\r\nYou may submit your code by referencing your github repository.\r\n\r\n### REQUIREMENTS:\r\n\r\n\r\n### Frontend:\r\n\r\n•\tMarkup must be valid, semantic HTML5\r\n•\tThe page must contain a form with text box for the user to search, and a button to submit\r\n•\tThe form must contain simple javascript validation to ensure the text box is not empty and contains at least 3 characters \r\n•\tThe form must submit to the controller asynchronously ( feel free to use jQuery's ajax function for this as it will save you time )\r\n•\tErrors must be handled and a friendly message displayed to the user should one be encountered\r\n•\tThe page must display the search results in a user-friendly way ( \"Name\", \"SKU\", \"Price\", \"Manufacturer\", and \"Description\" are required )\r\n•\tThe page must allow for sorting the results. Valid sort options and values are below: [refers to API parameter (sort_by_field)]\r\n\t\t\tOption\t\t\t\t\t\tValue\r\n\t\t\tName Ascending\t\t\t\tName:ASC\r\n\t\t\tName Descending\t\t\t\tName:DESC\r\n\t\t\tPrice Ascending\t\t\t\tPrice:ASC\r\n\t\t\tPrice Descending\t\t\t\tPrice:DESC\r\n\t\t\tRelevance (default, no value)\r\n•\tUse CSS to style the page. It doesn't need to win any beauty pageants, but shouldn't be a plain white page either. Simple styling is fine here. It’s your search page, do whatever you’d like.\r\n\r\n\r\n### Backend:\r\n\r\n•\tMust handle the request to render the view\r\n•\tMust handle the call to the search client (see API notes on page 3)\r\n•\tMust handle parsing the XML response returned by the client \r\n•\tMust store the following in a database:\r\n1.\tSession id ( some unique string, doesn't actually have to be a real session id )\r\n2.\tKeywords searched ( the terms the user searched for )\r\n3.\tThe \"Name\"s of the first 10 results returned from the search client\r\n•\tNote: We don't expect you to create the database, just hook it up as you would normally, but leave connection string blank. Use whatever table structure you feel makes the most sense.\r\n\r\n### Search API:\r\n\r\nURL:\t\t\thttp://api.americanmuscle.com/search/get\r\nMethod:\t\tGET\r\nParameters:\t\t\r\n\t\t\t(string) keywords  (required, minimum length 3)\r\n\t\t\t(int) page (optional, defaults to 1 if not passed)\r\n\t\t\t(string) sort_by_field (optional, ENUM( 'Price:ASC', 'Price:DESC', 'Name:ASC', 'Name:DESC' ), defaults to empty if not passed )\r\n...\t\t\t\t\r\n\t\t\t\t\r\nSample request:\thttp://api.americanmuscle.com/search/get?keywords=catback+exhaust&sort_by_field=Price:ASC\r\n[Sample keywords: catback+exhaust,tuner,keychain  (pretty much anything on our website will work here)]\r\n\r\n\r\n### Response:\t\tXML (text/xml)\r\nError Codes:\t\r\n•\t400\t\toccurs due to a bad request (invalid parameters, etc)\r\n•\t500\t\toccurs due to a fatal server error \r\n\r\n\r\nThe response returns a bunch of stuff that you will not use. The important stuff is outlined below:\r\n\r\n\r\nTotal results: \t\txml->pagination->total_products\r\nItems per page:\t25 (this is hardcoded, so you'll always get <= 25 results )\r\nCurrent page:\t\txml->pagination->current_page (page parameter if passed)\r\nTotal pages:\t\txml->pagination->total_pages\r\nResults:\t\txml->results\r\nName:\t\t\txml->results->result->Name\r\nSKU:\t\t\txml->results->result->Sku\r\nPrice:\t\t\txml->results->result->Price\r\nManufacturer:\t\txml->results->result->Manufacturer\r\nDescription:\t\txml->results->result->Description\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}